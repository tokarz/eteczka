{"version":3,"sources":["index.js"],"names":["global","factory","define","amd","exports","require","mod","angular","index","this","_angular","_interopRequireDefault","obj","__esModule","default","directive","$q","$parse","link","$scope","$element","$attrs","fileDrop","event","stopPropagation","preventDefault","dt","dataTransfer","files","filesDrop","$files","$event","fileDragleave","promises","reduce","call","prev","file","promise","readAsDataURL","then","dataURL","push","all","fileDragover","addClass","removeClass","bind","addEventListener","$on","removeEventListener","restrict","scope","done","reject","File","Blob","reader","FileReader","onloadend","loadEvent","target","result","Error","_angular2","app","module"],"mappings":"AAAA,cAEA,SAAWA,EAAQC,GACjB,GAAsB,kBAAXC,SAAyBA,OAAOC,IACzCD,QAAQ,WAAYD,OACf,IAAuB,mBAAZG,SAChBH,EAAQI,QAAQ,gBACX,CACL,GAAIC,IACFF,WAEFH,GAAQD,EAAOO,SACfP,EAAOQ,MAAQF,EAAIF,UAEpBK,KAAM,SAAUC,GAGjB,QAASC,GAAuBC,GAC9B,MAAOA,IAAOA,EAAIC,WAAaD,GAC7BE,UAASF,GAQb,QAASG,GAAUC,EAAIC,GAOrB,QAASC,GAAKC,EAAQC,EAAUC,GAc9B,QAASC,GAASC,GAChBA,EAAMC,kBACND,EAAME,gBACN,IAAIC,GAAKH,EAAMI,aACXC,EAAQF,GAAMA,EAAGE,OAAS,IAE9B,KAAKA,EAMH,MALAX,GAAOI,EAAOQ,WAAWV,GACvBW,UACAC,OAAQR,QAEVS,GAAcT,EAIhB,IAAIU,MAAcC,OAAOC,KAAKP,EAAO,SAAUQ,EAAMC,GACnD,GAAIC,GAAUC,EAAcF,GAAMG,KAAK,SAAUC,GAC/C,MAAOJ,GAAKI,QAAUA,GAGxB,OADAL,GAAKM,KAAKJ,GACHF,MAETpB,GAAG2B,IAAIV,GAAUO,KAAK,WACpBvB,EAAOI,EAAOQ,WAAWV,GACvBW,OAAQF,EACRG,OAAQR,IAEVS,EAAcT,KAIlB,QAASqB,GAAarB,GACpBA,EAAMC,kBACND,EAAME,iBACNL,EAASyB,SAAS,uBAGpB,QAASb,KACPZ,EAAS0B,YAAY,uBAnDvBP,EAAgBA,EAAcQ,MAC5B/B,GAAIA,IAENI,EAASyB,SAAS,aAClBzB,EAAS,GAAG4B,iBAAiB,YAAahB,GAC1CZ,EAAS,GAAG4B,iBAAiB,WAAYJ,GACzCxB,EAAS,GAAG4B,iBAAiB,OAAQ1B,GACrCH,EAAO8B,IAAI,WAAY,WACrB7B,EAAS,GAAG8B,oBAAoB,YAAalB,GAC7CZ,EAAS,GAAG8B,oBAAoB,WAAYN,GAC5CxB,EAAS,GAAG8B,oBAAoB,OAAQ5B,KAjB5C,OACE6B,SAAU,IACVC,OAAO,EACPlC,KAAMA,GA4DV,QAASqB,GAAcF,GACrB,MAAO,IAAI5B,MAAKO,GAAG,SAAUqC,EAAMC,GACjC,GAAIjB,YAAgBkB,OAAQlB,YAAgBmB,MAAM,CAChD,GAAIC,GAAS,GAAIC,WAEjBD,GAAOE,UAAY,SAAUC,GAC3B,MAAOP,GAAKO,EAAUC,OAAOC,SAG/BL,EAAOlB,cAAcF,OAErBiB,GAAO,GAAIS,OAAM,yEAA2E1B,MAvFlG,GAAI2B,GAAYrD,EAAuBD,GAQnCuD,EAAMD,EAAAA,WAAkBE,OAAO,wBAEnCD,GAAIlD,UAAU,aAAc,KAAM,SAAUA","file":"index.js","sourcesContent":["'use strict';\n\n(function (global, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    define(['angular'], factory);\n  } else if (typeof exports !== \"undefined\") {\n    factory(require('angular'));\n  } else {\n    var mod = {\n      exports: {}\n    };\n    factory(global.angular);\n    global.index = mod.exports;\n  }\n})(this, function (_angular) {\n  var _angular2 = _interopRequireDefault(_angular);\n\n  function _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n      default: obj\n    };\n  }\n\n  var app = _angular2.default.module('angular-files-drop', []);\n\n  app.directive('filesDrop', ['$q', '$parse', directive]);\n\n  function directive($q, $parse) {\n    return {\n      restrict: 'A',\n      scope: false,\n      link: link\n    };\n\n    function link($scope, $element, $attrs) {\n      readAsDataURL = readAsDataURL.bind({\n        $q: $q\n      });\n      $element.addClass('filesDrop');\n      $element[0].addEventListener('dragleave', fileDragleave);\n      $element[0].addEventListener('dragover', fileDragover);\n      $element[0].addEventListener('drop', fileDrop);\n      $scope.$on('$destroy', function () {\n        $element[0].removeEventListener('dragleave', fileDragleave);\n        $element[0].removeEventListener('dragover', fileDragover);\n        $element[0].removeEventListener('drop', fileDrop);\n      });\n\n      function fileDrop(event) {\n        event.stopPropagation();\n        event.preventDefault();\n        var dt = event.dataTransfer;\n        var files = dt && dt.files || null;\n\n        if (!files) {\n          $parse($attrs.filesDrop)($scope, {\n            $files: [],\n            $event: event\n          });\n          fileDragleave(event);\n          return;\n        }\n\n        var promises = [].reduce.call(files, function (prev, file) {\n          var promise = readAsDataURL(file).then(function (dataURL) {\n            return file.dataURL = dataURL;\n          });\n          prev.push(promise);\n          return prev;\n        }, []);\n        $q.all(promises).then(function () {\n          $parse($attrs.filesDrop)($scope, {\n            $files: files,\n            $event: event\n          });\n          fileDragleave(event);\n        });\n      }\n\n      function fileDragover(event) {\n        event.stopPropagation();\n        event.preventDefault();\n        $element.addClass('filesDrop--dragover');\n      }\n\n      function fileDragleave() {\n        $element.removeClass('filesDrop--dragover');\n      }\n    }\n  }\n\n  function readAsDataURL(file) {\n    return new this.$q(function (done, reject) {\n      if (file instanceof File || file instanceof Blob) {\n        var reader = new FileReader();\n\n        reader.onloadend = function (loadEvent) {\n          return done(loadEvent.target.result);\n        };\n\n        reader.readAsDataURL(file);\n      } else {\n        reject(new Error('Expected image.readAsDataURL(arg1): arg1 to be File instance, but got ' + file));\n      }\n    });\n  }\n});"],"sourceRoot":"/source/"}